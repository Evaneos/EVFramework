parameters :
    roles :
        ROLE_VISITOR : 0
        ROLE_ADMIN : 1
        ROLE_DEVELOPPER : 2
    security :
        base :
            isDevelopper :
                operation : @MethodSecurityExpressionOperations
                method : hasRole
                args : [ ROLE_DEVELOPPER ]
            isLogged :
                operation  : @MethodSecurityExpressionOperations
                method : isAuthenticated

classes:
    SecurityLogger:
        class: \Pyrite\Logger\LoggerFactory
        singleton: true
        builder: LoggerFactory->create
        arguments: [ 'app.security' ]

    # Controller for login/logout processing
    AuthDoLoginController :
        class : \EVFramework\Authentication\LoginPostController
        arguments : [ @ServiceAuthentication, @SecurityContext ]
        call :
            setEmailFieldName : [ 'email' ]
            setPasswordFieldName : [ 'password' ]
    AuthDoLogoutController :
        class : \EVFramework\Authentication\LogoutController
        arguments : [ @SecurityContext ]

    # Service that manage authentication
    ServiceAuthentication :
        class : \EVFramework\Authentication\ServiceAuthentication
        arguments : [ @BaseAuthenticationManager ]
        call:
            setLogger: [ @SecurityLogger ]

    BaseAuthenticationManager :
        class : \Trolamine\Core\Authentication\BaseAuthenticationManager
        arguments : [ @BaseUserDetailsService, @BasePasswordEncoder, @BitwiseRoleManager ]
    BaseUserDetailsService :
        class : \EVFramework\Authentication\BaseUserDetailsService
        call :
            setValidator : [ @AuthUserValidator ]
            setStorage : [ @AuthUserStorage ]
            setVOFQCN : [ \EVFramework\Authentication\BertheAuthUser ]
    BasePasswordEncoder :
        class : \EVFramework\Authentication\BasePasswordEncoder
    BitwiseRoleManager :
        class : \EVFramework\Authentication\BitwiseRoleManager
        call :
            setRoles : [ %roles ]

    # Berthe package that provides a user for authentication, with ServiceAuthentication as BaseManager
    AuthUserValidator :
        class : \Berthe\Validation\BaseValidator
        call :
            setErrors: [ @FunctionalListException ]
    AuthUserStorage :
        class : \Berthe\DAL\BaseStorage
        call :
            addStore : [ @AuthUserPersistentStore ]
    AuthUserPersistentStore :
        class : \Berthe\DAL\StoreDatabase
        call :
            setReader : [ @AuthUserReader ]
            setWriter : [ @AuthUserWriter ]


    AuthUserReader :
        class : \Berthe\DAL\BaseReader
        call :
            setDb : [ @DbReader ]
            setVOFQCN : [ \EVFramework\Authentication\BertheAuthUser ]
            setTablename : [ users ]
            setQueryBuilder : [ @FetcherPGSQLQueryBuilder ]
    AuthUserWriter :
        class : \Berthe\DAL\BaseWriter
        call :
            setDb : [ @DbWriter ]
            setTableName: ['users']
